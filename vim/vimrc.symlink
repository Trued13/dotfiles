" Vundle start.
set nocompatible
filetype off

" Set the runtime path to include Vundle and initialize.
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Let Vundle manage Vundle.
Plugin 'gmarik/Vundle.vim'

" Assistant for looking up function definitions.
Plugin 'assistant'

" Colors
Plugin 'sickill/vim-monokai'

" CtrlP
Plugin 'kien/ctrlp.vim'

" GitGutter
Plugin 'airblade/vim-gitgutter'

" Markdown
Plugin 'godlygeek/tabular'
Plugin 'tpope/vim-markdown'
Plugin 'reedes/vim-pencil'
Plugin 'itspriddle/vim-marked'

" Drupal
Plugin 'git://drupalcode.org/project/vimrc.git', {'rtp': 'bundle/vim-plugin-for-drupal/'}

" Fugitive
Plugin 'tpope/vim-fugitive'

" Vim Powerline
Plugin 'bling/vim-airline'

" SuperTab
Plugin 'ervandew/supertab'

" Tmuxline
Plugin 'edkolev/tmuxline.vim'

" Syntastic for better code syntax
Plugin 'scrooloose/syntastic'

" Syntax highlighting plugins.
Plugin 'cakebaker/scss-syntax.vim'
Plugin 'elzr/vim-json'
Plugin 'groenewege/vim-less'
Plugin 'hail2u/vim-css3-syntax'
Plugin 'mustache/vim-mustache-handlebars'
Plugin 'othree/html5.vim'
Plugin 'pangloss/vim-javascript'
Plugin 'tpope/vim-cucumber'

" All Plugins must be added before the following line.
call vundle#end()
filetype plugin indent on
" Vundle end

" Turn on syntax highlighting.
syntax enable
colorscheme monokai

" Setup tree view for the File Explorer.
let g:netrw_liststyle=3

" Vim Airline settings.
let g:airline_powerline_fonts=1
set laststatus=2
" Turn on Vim Airline tabs.
let g:airline#extensions#tabline#enabled = 1

" TmuxLine settings.
let g:tmuxline_preset = {
  \'a'        : '#S',
  \'c'        : '#H',
  \'win'      : '#I #W',
  \'cwin'     : '#I #W',
  \'y'        : ['%a  %Y-%m-%d', '%l:%M %p'],
  \'options'  : {'status-justify' : 'left'}}

" Turn on line numbering.
set number

" Backspace settings.
set backspace=eol,start,indent

" Code folding settings.
set foldmethod=indent

" Set title of vim.
set title

" Start scrolling after the cursor has made it to the 3rd line above the bottom.
set scrolloff=3

" Show cursorline in the active vim window.
augroup CursorLine
  au!
  au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
  au WinLeave * setlocal nocursorline
augroup END

" Highlight search terms.
set hlsearch
set incsearch

" Stop distracting your co-workers.
set visualbell

" Open new splits on to bottom and right.
set splitbelow
set splitright

" No .swp files.
set noswapfile

" Turn wrap off (just to experiment for now).
set nowrap

" Tab settings.
set expandtab
set shiftwidth=2
set softtabstop=2

" Folding settings.
set foldmethod=indent
set foldnestmax=10
set nofoldenable
set foldlevel=1

" Turn off autohide of quotes in json-vim.
let g:vim_json_syntax_conceal = 0

" Wildmenu settings.
if has("wildmenu")
  set wildignore+=*.a,*.o
  set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.png
  set wildignore+=.DS_Store,.git,.hg,.svn
  set wildignore+=*~,*.swp,*.tmp
  set wildmenu
  set wildmode=longest,list
endif

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Increase speed of ctrlp by excluding files.
" https://medium.com/a-tiny-piece-of-vim/making-ctrlp-vim-load-100x-faster-7a722fae7df6
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']

" Automatically reload vimrc when it's saved.
augroup VimrcSo
  au!
  autocmd BufWritePost $MYVIMRC so $MYVIMRC
augroup END

" Highligh extra whitespace.
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

"Markdown specific stuff.
let g:marked_app = "Marked"
autocmd BufNewFile,BufReadPost *.md set filetype=markdown
autocmd Filetype markdown call SetMarkdownOptions()
function SetMarkdownOptions()
  set showmode
  " Enable spellcheck.
  set spell spelllang=en_us
  " Wrap text (without linebreak charecters)
  " I don't want to highlight the current line.
  highlight CursorLine ctermbg=NONE
  " Lastly, invoke Goyo plugin.
endfunction
" Vim-pencil stuff.
augroup pencil
  autocmd!
  autocmd FileType markdown,mkd,md call pencil#init()
  autocmd FileType text         call pencil#init()
augroup ENDighlight ExtraWhitespace ctermbg=red guibg=red

" Remove default old line.
set noshowmode

let g:syntastic_javascript_checkers = ['jshint']

" Explicitely state the config file of JSHint for Vim
let g:syntastic_javascript_jshint_args = '--config /Users/shrop/.jshintrc'


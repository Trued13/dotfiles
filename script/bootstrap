#!/bin/bash
#
# bootstrap installs things.

DOTFILES_ROOT="`pwd`"

set -e

echo ''

info () {
  printf "  [ \033[00;34m..\033[0m ] $1"
}

user () {
  printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

setup_gitconfig () {
  echo -n "Git email: "
  read gitemail
  git config --global user.email $gitemail
  success 'gitconfig'
}

link_files () {
  ln -s $1 $2
  success "linked $1 to $2"
}

install_dotfiles () {
  info 'installing dotfiles'

  overwrite_all=false
  backup_all=false
  skip_all=false

  for source in `find $DOTFILES_ROOT -maxdepth 2 -name \*.symlink`
  do
    dest="$HOME/.`basename \"${source%.*}\"`"

    if [ -f $dest ] || [ -d $dest ]
    then

      overwrite=false
      backup=false
      skip=false

      if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
      then
        user "File already exists: `basename $source`, what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac
      fi

      if [ "$overwrite" == "true" ] || [ "$overwrite_all" == "true" ]
      then
        rm -rf $dest
        success "removed $dest"
      fi

      if [ "$backup" == "true" ] || [ "$backup_all" == "true" ]
      then
        mv $dest $dest\.backup
        success "moved $dest to $dest.backup"
      fi

      if [ "$skip" == "false" ] && [ "$skip_all" == "false" ]
      then
        link_files $source $dest
      else
        success "skipped $source"
      fi

    else
      link_files $source $dest
    fi

  done
}

setup_gitconfig
install_dotfiles

# Install homebrew and OS X specific apps
if [ $(uname) == "Darwin" ]; then
  which -s brew
  if [[ $? != 0  ]] ; then
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  fi
  /usr/local/bin/brew update
  /usr/local/bin/brew tap homebrew/homebrew-php
  /usr/local/bin/brew upgrade
  /usr/local/bin/brew install ansible
  /usr/local/bin/brew install clamav
  /usr/local/bin/brew install ctags
  /usr/local/bin/brew install dos2unix
  /usr/local/bin/brew install git
  /usr/local/bin/brew install go
  /usr/local/bin/brew install httpie
  /usr/local/bin/brew install hub
  /usr/local/bin/brew install jo
  /usr/local/bin/brew install jsonpp
  /usr/local/bin/brew install liquidprompt
  /usr/local/bin/brew install mariadb
  /usr/local/bin/brew install nmap
  /usr/local/bin/brew install php71
  /usr/local/bin/brew install reattach-to-user-namespace
  /usr/local/bin/brew install redis
  /usr/local/bin/brew install ssh-copy-id
  /usr/local/bin/brew install the_silver_searcher
  /usr/local/bin/brew install tig
  /usr/local/bin/brew install tmux
  /usr/local/bin/brew install tree
  /usr/local/bin/brew install vim
  /usr/local/bin/brew install watch
  /usr/local/bin/brew install wget

  # Install nvm and global node.
  curl -o- https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash
  export NVM_DIR="$HOME/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh" # This loads nvm
  [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
  nvm install node

  # Install npm packags.
  npm install -g eslint

  # Install rvm and global ruby.
  curl -sSL https://get.rvm.io | bash -s stable
  export PATH="$PATH:$HOME/.rvm/bin"
  rvm use system

  # Install Monaco for Powerline font.
  cp ~/.dotfiles/fonts/MonacoforPowerline.otf /Library/Fonts

  # Install wuzz.
  go get github.com/asciimoo/wuzz
fi

# Install Plug.
curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

# Install plugins.
vim +PlugInstall +qall now

# Install Composer.
curl -Ss https://getcomposer.org/installer | php
mv composer.phar /usr/local/bin/composer

# Install Composer project dependencies.
composer global require hirak/prestissimo
composer global require drush/config-extra

# Install PHP_CodeSniffer and Drupal Coder.
composer global require squizlabs/php_codesniffer:^2.8.1
composer global require dealerdirect/phpcodesniffer-composer-installer
composer global require drupal/coder

# Install Drupal Console.
composer global require drupal/console:@stable

# Install Drush and related drush tools.
composer global require drush/drush:^8.1
composer global require pantheon-systems/terminus

if [ ! -d "$HOME/.drush" ]; then
  mkdir -p $HOME/.drush
fi

drush cc drush


echo ''
echo '  All installed!'

